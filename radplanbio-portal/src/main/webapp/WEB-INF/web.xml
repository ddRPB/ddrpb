<?xml version="1.0" encoding="UTF-8"?>

<!-- Web application configuration -->
<web-app
        version="2.5"
        xmlns="http://java.sun.com/xml/ns/javaee"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="
        http://java.sun.com/xml/ns/javaee
        http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
    >

    <!-- The master configuration file for this Spring web application -->
    <!-- Spring context listener will load the application string configuration (resources/spring/applicationContext-web.xml, and spring security from WEB-INF) -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            classpath:net/bull/javamelody/monitoring-spring.xml
            classpath*:spring/applicationContext-web.xml
            WEB-INF/applicationContext-security-http.xml
        </param-value>
    </context-param>
    <context-param>
        <param-name>primefaces.THEME</param-name>
        <param-value>omega</param-value>
    </context-param>
    <!-- Servlet container should load the spring context listener-->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <listener>
        <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
    </listener>
    <!-- I want to keep list of sessions on the server side so I can load session by id -->
    <listener>
        <listener-class>de.dktk.dd.rpb.portal.web.listeners.HttpSessionCollector</listener-class>
    </listener>

    <!-- Filters -->
    <filter>
        <filter-name>gzipResponseFilter</filter-name>
        <filter-class>org.omnifaces.filter.GzipResponseFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>gzipResponseFilter</filter-name>
        <servlet-name>facesServlet</servlet-name>
    </filter-mapping>
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.omnifaces.filter.CharacterEncodingFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- Spring security filter must be placed after ConversationFilter (read ConversationFilter.java) -->
    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    <!-- Map the Spring security filter to facesServlet -->
    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <servlet-name>facesServlet</servlet-name>
    </filter-mapping>

    <!-- The openEntityManagerInViewFilter (since it is placed after the conversationFilter) either reuses the conversation's entity manager or create one just for the request. -->
    <filter>
        <filter-name>openEntityManagerInViewFilter</filter-name>
        <filter-class>org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>openEntityManagerInViewFilter</filter-name>
        <servlet-name>facesServlet</servlet-name>
        <dispatcher>FORWARD</dispatcher>
        <dispatcher>REQUEST</dispatcher>
        <dispatcher>INCLUDE</dispatcher>
    </filter-mapping>

    <!-- Monitoring with java melody -->
    <filter>
        <filter-name>monitoring</filter-name>
        <filter-class>net.bull.javamelody.MonitoringFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>monitoring</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <listener>
        <listener-class>net.bull.javamelody.SessionListener</listener-class>
    </listener>

    <!-- Must be after spring security -->
    <filter>
        <filter-name>fileUploadFilter</filter-name>
        <filter-class>org.primefaces.webapp.filter.FileUploadFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>fileUploadFilter</filter-name>
        <servlet-name>facesServlet</servlet-name>
    </filter-mapping>

    <!-- No caching of pages -->
    <filter>
        <filter-name>noPageCacheFilter</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>noPageCacheFilter</filter-name>
        <servlet-name>facesServlet</servlet-name>
    </filter-mapping>

    <!-- JSF 2 IMPLEMENTATION -->
    <!--Use JSF view templates saved as *.xhtml, for use with Facelets -->
    <context-param>
        <param-name>javax.faces.DEFAULT_SUFFIX</param-name>
        <param-value>.xhtml</param-value>
    </context-param>
    <!-- (in bytes) Ideally the buffer size should be large enough so the largest view can fit in it entirely 
        for exception handling purposes and also performance reason. -->
    <context-param>
        <param-name>javax.faces.FACELETS_BUFFER_SIZE</param-name>
        <param-value>10240</param-value>
    </context-param>
    <!-- Enables special Facelets debug output during development -->
    <context-param>
        <param-name>javax.faces.PROJECT_STAGE</param-name>
        <param-value>Production</param-value><!-- Could be 'Development' or 'Production' -->
    </context-param>
    <!-- Causes Facelets to refresh templates during development (in seconds) -->
    <context-param>
        <param-name>javax.faces.FACELETS_REFRESH_PERIOD</param-name>
        <param-value>1</param-value><!-- -1 means disabled -->
    </context-param>
    <!-- Resources cache expiration (in milliseconds). Enabled only in 'Production' stage -->
    <context-param>
        <param-name>com.sun.faces.defaultResourceMaxAge</param-name>
        <param-value>86400000</param-value>
    </context-param>
    <context-param>
        <param-name>javax.faces.FACELETS_SKIP_COMMENTS</param-name>
        <param-value>true</param-value>
    </context-param>
    <context-param>
        <param-name>javax.faces.DATETIMECONVERTER_DEFAULT_TIMEZONE_IS_SYSTEM_TIMEZONE</param-name>
        <param-value>true</param-value>
    </context-param>

    <!-- Just here so the JSF implementation can initialize, *not* used at runtime -->
    <servlet>
        <servlet-name>facesServlet</servlet-name>
        <servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <!-- Just here so the JSF implementation can initialize  -->
    <servlet-mapping>
        <servlet-name>facesServlet</servlet-name>
        <url-pattern>*.faces</url-pattern>
    </servlet-mapping>
    <context-param>
        <param-name>com.sun.faces.expressionFactory</param-name>
        <param-value>org.jboss.el.ExpressionFactoryImpl</param-value>
    </context-param>
    <context-param>
        <param-name>org.apache.myfaces.EXPRESSION_FACTORY</param-name>
        <param-value>org.jboss.el.ExpressionFactoryImpl</param-value>
    </context-param>

    <!-- Servlet for JAX-RS Web-API -->
    <servlet>
        <servlet-name>Jersey REST Service</servlet-name>
        <servlet-class>com.sun.jersey.spi.spring.container.servlet.SpringServlet</servlet-class>
        <!-- What is the location of web services -->
        <init-param>
            <param-name>com.sun.jersey.config.property.packages</param-name>
            <param-value>de.dktk.dd.rpb.api</param-value>
        </init-param>
        <load-on-startup>2</load-on-startup>
    </servlet>
    <!-- What is the base URL for accessing web services -->
    <servlet-mapping>
        <servlet-name>Jersey REST Service</servlet-name>
        <url-pattern>/api/*</url-pattern>
    </servlet-mapping>

    <!-- Basic Auth filter for WebDAV web services -->
    <filter>
        <filter-name>BasicAuthenticationFilter</filter-name>
        <filter-class>de.dktk.dd.rpb.api.support.BasicAuthenticationFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>BasicAuthenticationFilter</filter-name>
        <url-pattern>/api/v1/webdav/*</url-pattern>
    </filter-mapping>

    <!-- Mime types -->
    <mime-mapping>
        <extension>css</extension>
        <mime-type>text/css</mime-type>
    </mime-mapping>
    <mime-mapping>
        <extension>gif</extension>
        <mime-type>image/gif</mime-type>
    </mime-mapping>
    <mime-mapping>
        <extension>html</extension>
        <mime-type>text/html</mime-type>
    </mime-mapping>
    <mime-mapping>
        <extension>htm</extension>
        <mime-type>text/html</mime-type>
    </mime-mapping>
    <mime-mapping>
        <extension>ico</extension>
        <mime-type>image/x-icon</mime-type>
    </mime-mapping>
    <mime-mapping>
        <extension>jpeg</extension>
        <mime-type>image/jpeg</mime-type>
    </mime-mapping>
    <mime-mapping>
        <extension>jpg</extension>
        <mime-type>image/jpeg</mime-type>
    </mime-mapping>
    <mime-mapping>
        <extension>js</extension>
        <mime-type>application/x-javascript</mime-type>
    </mime-mapping>
    <mime-mapping>
        <extension>png</extension>
        <mime-type>image/png</mime-type>
    </mime-mapping>
    <mime-mapping>
        <extension>txt</extension>
        <mime-type>text/plain</mime-type>
    </mime-mapping>
    <mime-mapping>
        <extension>xml</extension>
        <mime-type>text/xml</mime-type>
    </mime-mapping>

    <!-- Session timeout (in minutes) -->
    <!-- 30 min timeout + (3 min margin) to ensure that session is always invalidated manually and the users gets to see the dialog with the session expired information -->
	<session-config>
		<session-timeout>33</session-timeout>
	</session-config>

    <error-page>
        <exception-type>javax.faces.application.ViewExpiredException</exception-type>
        <location>/home.faces?session_expired=true</location>
    </error-page>
    <error-page>
        <exception-type>org.springframework.security.core.AuthenticationException</exception-type>
        <location>/home.faces?session_expired=true</location>
    </error-page>

    <!-- Define where to look for error display page when database access exception occurs -->
    <error-page>
        <exception-type>org.springframework.dao.DataAccessException</exception-type>
        <location>/error/data-error.faces</location>
    </error-page>

    <!-- Define where to look for error display page when face page cannot be found -->
    <error-page>
        <exception-type>com.sun.faces.context.FacesFileNotFoundException</exception-type>
        <location>/error/not-found.faces</location>
    </error-page>

    <!-- Define where to look for error display page when java language exception occurs -->
    <error-page>
        <exception-type>java.lang.Throwable</exception-type>
        <location>/error/error.faces</location>
    </error-page>

    <!-- Define where to look for error display page when HTTP 500 - error -->
    <error-page>
        <error-code>500</error-code>
        <location>/error/error.faces</location>
    </error-page>

    <!-- Define where to look for error display page when HTTP 404 - not found occurs -->
    <error-page>
        <error-code>404</error-code>
        <location>/error/not-found.faces</location>
    </error-page>

    <!-- Default display page when accessing the domain -->
    <welcome-file-list>
        <welcome-file>index.html</welcome-file>
    </welcome-file-list>

    <!-- Define security access restriction to all XHTML pages -->
    <security-constraint>
        <display-name>Restrict direct access to XHTML files</display-name>
        <web-resource-collection>
            <web-resource-name>XHTML files</web-resource-name>
            <url-pattern>*.xhtml</url-pattern>
        </web-resource-collection>
        <auth-constraint/>
    </security-constraint>

</web-app>