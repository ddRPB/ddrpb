/*
 * This file is part of RadPlanBio
 *
 * Copyright (C) 2013-2015 Tomas Skripcak
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.dktk.dd.rpb.core.dao.support;

import static com.google.common.collect.Lists.newArrayList;

import java.util.List;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import de.dktk.dd.rpb.core.domain.Identifiable;

/**
 * Helper to create a predicate out of {@link EntitySelector}s
 *
 * @author initial source code generated by Celerio, a Jaxio product
 * @since 01 Apr 2013
 */
public class ByEntitySelectorUtil {

    //region Static

    public static <E> Predicate byEntitySelectors(Root<E> root, CriteriaBuilder builder, final List<EntitySelector<?, ? extends Identifiable<?>, ?>> selectors) {

        List<Predicate> predicates = newArrayList();

        for (EntitySelector<?, ? extends Identifiable<?>, ?> s : selectors) {
            @SuppressWarnings("unchecked")
            EntitySelector<E, ? extends Identifiable<?>, ?> selector = (EntitySelector<E, ? extends Identifiable<?>, ?>) s;

            if (selector.isNotEmpty()) {
                List<Predicate> selectorPredicates = newArrayList();

                for (Identifiable<?> selection : selector.getSelected()) {
                    if (selector.getField() != null) {
                        selectorPredicates.add(builder.equal(root.get(selector.getField()), selection.getId()));
                    } else {
                        selectorPredicates.add(builder.equal(root.get(selector.getCpkField()).get(selector.getCpkInnerField().getName()), selection.getId()));
                    }
                }
                predicates.add(JpaUtil.orPredicate(builder, selectorPredicates));
            }
        }
        return JpaUtil.andPredicate(builder, predicates);
    }

    //endregion

}